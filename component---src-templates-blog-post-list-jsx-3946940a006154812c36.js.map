{"version":3,"file":"component---src-templates-blog-post-list-jsx-3946940a006154812c36.js","mappings":"yNAkBA,EAZiB,SAAC,GAAe,IAAbA,EAAY,EAAZA,MAClB,OACE,gBAACC,EAAA,EAAD,CAAKC,UAAU,aACb,gBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IACzBN,EAAMO,KAAI,SAAAC,GAAI,OACb,gBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAKG,YAAYC,MAAOJ,KAAMA,UCoBvD,EA1BiB,SAAC,GAAqC,IAAnCK,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAC5BC,EAAYH,EAAKI,KAAKC,aAAaN,MACjCO,EAA0BJ,EAA1BI,YACFC,EAA0B,IAAhBD,EACVE,EAASF,IAFmBJ,EAAbO,SAGfC,EAAWJ,EAAc,GAAM,EAAI,IAAMA,EAAc,GAAGK,WAC1DC,GAAYN,EAAc,GAAGK,WAEnC,OACE,gBAACE,EAAA,EAAD,CAAQZ,SAAUA,EAAUF,MAAOI,GACjC,gBAAC,EAAD,CAAUhB,MAAOa,EAAKc,OAAOC,MAAMrB,KAAI,SAAAsB,GAAC,OAAIA,EAAEC,WAC5CV,GACA,gBAAC,EAAAW,KAAD,CAAMC,GAAE,SAAWT,EAAYU,IAAI,QAAnC,oBAKAZ,GACA,gBAAC,EAAAU,KAAD,CAAMC,GAAE,SAAWP,EAAYQ,IAAI,QAAnC","sources":["webpack://dudexpress/./src/components/GameList.jsx","webpack://dudexpress/./src/templates/BlogPostList.jsx"],"sourcesContent":["import React from \"react\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\n\nimport GameCard from \"../components/misc/GameCard\"\n\nconst GameList = ({ games }) => {\n  return (\n    <Row className=\"game-list\">\n      <Col lg={{ span: 6, offset: 3 }}>\n        {games.map(post => (\n          <GameCard key={post.frontmatter.title} post={post} />\n        ))}\n      </Col>\n    </Row>\n  )\n}\n\nexport default GameList\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/Layout\"\nimport GameList from \"../components/GameList\"\n\nconst BlogList = ({ data, location, pageContext }) => {\n  const siteTitle = data.site.siteMetadata.title\n  const { currentPage, numPages } = pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = currentPage - 1 === 1 ? \"\" : (currentPage - 1).toString()\n  const nextPage = (currentPage + 1).toString()\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <GameList games={data.allMdx.edges.map(x => x.node)} />\n      {!isFirst && (\n        <Link to={`/blog/${prevPage}`} rel=\"prev\">\n          ← Previous Page\n        </Link>\n      )}\n\n      {!isLast && (\n        <Link to={`/blog/${nextPage}`} rel=\"next\">\n          Next Page →\n        </Link>\n      )}\n    </Layout>\n  )\n}\n\nexport default BlogList\n\nexport const blogListQuery = graphql`\n  query blogListQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMdx(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            description\n            featureImage {\n              childImageSharp {\n                fluid(maxWidth: 800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["games","Row","className","Col","lg","span","offset","map","post","GameCard","key","frontmatter","title","data","location","pageContext","siteTitle","site","siteMetadata","currentPage","isFirst","isLast","numPages","prevPage","toString","nextPage","Layout","allMdx","edges","x","node","Link","to","rel"],"sourceRoot":""}